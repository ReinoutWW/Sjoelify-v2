rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is accessing their own data
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check if user is a participant in the game
    function isGameParticipant(gameData) {
      return isAuthenticated() && 
             (gameData.playerIds is list && 
              request.auth.uid in gameData.playerIds);
    }

    // Users collection rules - Allow reading all user profiles
    match /users/{userId} {
      allow read: if isAuthenticated();  // Anyone authenticated can read user profiles
      allow create: if isOwner(userId);  // Only create your own profile
      allow update: if isOwner(userId);  // Only update your own profile
      allow delete: if false;  // No deletion allowed
    }

    // Games collection rules
    match /games/{gameId} {
      // Allow create if user is authenticated
      allow create: if isAuthenticated();
      
      // Allow read if user is authenticated (needed for game listing)
      allow read: if isAuthenticated();
      
      // Allow update if user is a participant
      allow update: if isAuthenticated() && 
                     (resource == null || 
                      isGameParticipant(resource.data));
      
      // Subcollection rules for rounds
      match /rounds/{roundId} {
        // Get parent game data
        function getGame() {
          return get(/databases/$(database)/documents/games/$(gameId)).data;
        }
        
        // Allow read if user is a participant in the parent game
        allow read: if isAuthenticated() && isGameParticipant(getGame());
        
        // Allow create if user is a participant and writing their own round
        allow create: if isAuthenticated() && 
                     isGameParticipant(getGame()) &&
                     request.resource.data.playerId == request.auth.uid;
                     
        // No updates or deletes to rounds
        allow update, delete: if false;
      }
    }
  }
} 