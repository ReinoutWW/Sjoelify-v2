rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is accessing their own data
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check if user is a participant in the game
    function isGameParticipant(gameData) {
      return isAuthenticated() && 
             (gameData.playerIds is list && 
              request.auth.uid in gameData.playerIds);
    }

    // Helper function to validate round data
    function isValidRoundData(roundData) {
      return roundData.keys().hasAll([
        'playerId', 'roundNumber', 'scores', 
        'completeSets', 'completeSetPoints', 
        'leftoverPoints', 'totalScore', 
        'createdAt'
      ]);
    }

    // Helper function to check if fields are unchanged
    function areFieldsUnchanged(oldData, newData, fields) {
      return oldData.diff(newData).unchangedKeys().hasAll(fields);
    }

    // Users collection rules
    match /users/{userId} {
      // Allow public read access to user profiles for leaderboard
      allow read: if true;
      allow create: if isOwner(userId);  // Only create your own profile
      allow update: if isOwner(userId);  // Only update your own profile
      allow delete: if false;  // No deletion allowed
    }

    // Games collection rules
    match /games/{gameId} {
      // Allow create if user is authenticated
      allow create: if isAuthenticated();
      
      // Allow read for:
      // 1. Public access to closed games (for leaderboard)
      // 2. Authenticated users (for game listing)
      allow read: if true;
      
      // Allow update if user is a participant and game is not closed
      allow update: if isAuthenticated() && 
                   isGameParticipant(resource.data) && 
                   !resource.data.isClosed;
      
      // Rounds subcollection rules
      match /rounds/{roundId} {
        // Allow read if parent game is accessible
        allow read: if true;
        
        // Allow create/update if:
        // 1. User is a participant
        // 2. Game is not closed
        // 3. Round number matches current round
        // 4. Target player is a participant
        allow write: if isAuthenticated() && 
                    isGameParticipant(get(/databases/$(database)/documents/games/$(gameId)).data) && 
                    !get(/databases/$(database)/documents/games/$(gameId)).data.isClosed && 
                    request.resource.data.roundNumber == get(/databases/$(database)/documents/games/$(gameId)).data.currentRound && 
                    request.resource.data.playerId in get(/databases/$(database)/documents/games/$(gameId)).data.playerIds;
        
        allow delete: if false;
      }
    }
  }
} 